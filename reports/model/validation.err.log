Traceback (most recent call last):
  File "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/nbclient/client.py", line 1204, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/nbclient/util.py", line 84, in wrapped
    return just_run(coro(*args, **kwargs))
  File "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/nbclient/util.py", line 62, in just_run
    return loop.run_until_complete(coro)
  File "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/asyncio/base_events.py", line 647, in run_until_complete
    return future.result()
  File "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/nbclient/client.py", line 663, in async_execute
    await self.async_execute_cell(
  File "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/nbclient/client.py", line 965, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/nbclient/client.py", line 862, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
import numpy as np
import pandas as pd
from policyengine_uk import (
    Microsimulation,
    REPO,
    EnhancedFRS,
    CalibratedFRS,
)
from policyengine_uk.system import (
    parameters as BASELINE_PARAMETERS,
    variables as BASELINE_VARIABLES,
)
from policyengine_core.parameters import ParameterNode
from pathlib import Path
import yaml
import plotly.express as px
import warnings

warnings.filterwarnings("ignore")
warnings.simplefilter("ignore")

policyengine_uk = "OpenFisca-UK"
UKMOD = "UKMOD"
EXTERNAL = "External"

parameters = BASELINE_PARAMETERS
default_variables = BASELINE_VARIABLES

VARIABLES = [
    "child_benefit",
    "income_support",
    "JSA_income",
    "housing_benefit",
    "working_tax_credit",
    "child_tax_credit",
    "universal_credit",
    "pension_credit",
    "income_tax",
    "total_NI",
    "employment_income",
    "self_employment_income",
    "pension_income",
    "property_income",
    "savings_interest_income",
    "dividend_income",
]

sim = Microsimulation(dataset=EnhancedFRS)

# https://stackoverflow.com/questions/34667108/ignore-dates-and-times-while-parsing-yaml

yaml.SafeLoader.yaml_implicit_resolvers = {
    k: [r for r in v if r[0] != "tag:yaml.org,2002:timestamp"]
    for k, v in yaml.SafeLoader.yaml_implicit_resolvers.items()
}

with open(
    REPO.parent
    / "docs"
    / "book"
    / "model"
    / "ukmod_country_report_statistics.yaml",
    mode="r",
) as f:
    ukmod_statistics = ParameterNode(
        "ukmod", data=yaml.load(f, Loader=yaml.SafeLoader)
    )


def process_scalar(x, divisor, decimals):
    try:
        if np.isnan(x):
            return x
    except:
        return ""
    return round(x / divisor, decimals)


def model_validation_table(
    model_year_variable_to_result_func,
    title=None,
    start_year=2022,
    end_year=2025,
    divisor=1,
    decimals=0,
    models=[EXTERNAL, policyengine_uk, UKMOD],
    variables=VARIABLES,
):
    dfs = []
    for model in models:
        df = pd.DataFrame(
            {
                year: {
                    BASELINE_VARIABLES[variable].label: process_scalar(
                        model_year_variable_to_result_func(
                            model, year, variable
                        ),
                        divisor,
                        decimals,
                    )
                    for variable in variables
                }
                for year in range(start_year, end_year + 1)
            }
        )
        dfs.append(df.T)
    return pd.concat(dfs, keys=models).replace(np.nan, "")


def budgetary_impact(model, year, variable):
    try:
        if model == policyengine_uk:
            return sim.calc(variable, map_to="household", period=year).sum()
        elif model == UKMOD:
            return getattr(ukmod_statistics.ukmod.budgetary_impact, variable)(
                f"{year}-01-01"
            )
        elif model == EXTERNAL:
            param = BASELINE_PARAMETERS.calibration.programs.children[
                variable
            ].budgetary_impact
            if variable == "income_tax":
                param = param.by_country
            if "UNITED_KINGDOM" in param.children:
                return param.UNITED_KINGDOM(f"{year}-01-01")
            elif "GREAT_BRITAIN" in param.children:
                return param.GREAT_BRITAIN(f"{year}-01-01")
    except Exception as e:
        return np.nan


df = model_validation_table(budgetary_impact, divisor=1e9, decimals=1)

df[df.columns[:7]]
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mImportError[0m                               Traceback (most recent call last)
Cell [0;32mIn[1], line 3[0m
[1;32m      1[0m [38;5;28;01mimport[39;00m [38;5;21;01mnumpy[39;00m [38;5;28;01mas[39;00m [38;5;21;01mnp[39;00m
[1;32m      2[0m [38;5;28;01mimport[39;00m [38;5;21;01mpandas[39;00m [38;5;28;01mas[39;00m [38;5;21;01mpd[39;00m
[0;32m----> 3[0m [38;5;28;01mfrom[39;00m [38;5;21;01mpolicyengine_uk[39;00m [38;5;28;01mimport[39;00m (
[1;32m      4[0m     Microsimulation,
[1;32m      5[0m     REPO,
[1;32m      6[0m     EnhancedFRS,
[1;32m      7[0m     CalibratedFRS,
[1;32m      8[0m )
[1;32m      9[0m [38;5;28;01mfrom[39;00m [38;5;21;01mpolicyengine_uk[39;00m[38;5;21;01m.[39;00m[38;5;21;01msystem[39;00m [38;5;28;01mimport[39;00m (
[1;32m     10[0m     parameters [38;5;28;01mas[39;00m BASELINE_PARAMETERS,
[1;32m     11[0m     variables [38;5;28;01mas[39;00m BASELINE_VARIABLES,
[1;32m     12[0m )
[1;32m     13[0m [38;5;28;01mfrom[39;00m [38;5;21;01mpolicyengine_core[39;00m[38;5;21;01m.[39;00m[38;5;21;01mparameters[39;00m [38;5;28;01mimport[39;00m ParameterNode

[0;31mImportError[0m: cannot import name 'CalibratedFRS' from 'policyengine_uk' (/home/runner/work/policyengine-uk/policyengine-uk/policyengine_uk/__init__.py)
ImportError: cannot import name 'CalibratedFRS' from 'policyengine_uk' (/home/runner/work/policyengine-uk/policyengine-uk/policyengine_uk/__init__.py)

